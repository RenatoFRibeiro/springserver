/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Employee;
import io.swagger.model.Employees;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-27T14:38:21.509Z[GMT]")
@Api(value = "employees", description = "the employees API")
public interface EmployeesApi {

    @ApiOperation(value = "", nickname = "employeesGet", notes = "Obtain information about emloyees from the HR database", response = Employees.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful pull of employee info", response = Employees.class) })
    @RequestMapping(value = "/employees",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Employees> employeesGet(@Min(10) @Max(20) @ApiParam(value = "The amount of employees returned", allowableValues = "") @Valid @RequestParam(value = "bodyLimit", required = false) Integer bodyLimit,@Min(1) @Max(5) @ApiParam(value = "The pages to  return employees info", allowableValues = "") @Valid @RequestParam(value = "pageLimit", required = false) Integer pageLimit);

    @ApiOperation(value = "", nickname = "employeesIdDelete", notes = "Obtain information about specific employee", response = Employee.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = Employee.class)   })
    @RequestMapping(value = "/employees/{id}",
            produces = { "application/json", "application/xml" },
            method = RequestMethod.DELETE)
    ResponseEntity<Employee> employeesIdDelete(@ApiParam(value = "the id of the employee",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "employeesIdGet", notes = "Obtain information about specific employee", response = Employee.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = Employee.class) })
    @RequestMapping(value = "/employees/{id}",
        produces = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Employee> employeesIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "employeesPost", notes = "Creates a new employee in the database", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created a new employee") })
    @RequestMapping(value = "/employees",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> employeesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Employee body);

}
